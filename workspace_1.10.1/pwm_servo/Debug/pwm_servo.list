
pwm_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cbc  08002cbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cbc  08002cbc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cbc  08002cbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cbc  08002cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002cd0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002cd0  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b145  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf5  00000000  00000000  0002b17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002d980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d63  00000000  00000000  0002e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1c4  00000000  00000000  0004524b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008646e  00000000  00000000  0005140f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d787d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000322c  00000000  00000000  000d78d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c7c 	.word	0x08002c7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c7c 	.word	0x08002c7c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8000152:	af00      	add	r7, sp, #0
int main(void)
 8000154:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8000158:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800015c:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8000160:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fb2a 	bl	80007bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f81c 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8e2 	bl	8000334 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000170:	f000 f85e 	bl	8000230 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000174:	f000 f8b4 	bl	80002e0 <MX_USART2_UART_Init>
  uint8_t rxbuffer[1000];
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000178:	2100      	movs	r1, #0
 800017a:	4808      	ldr	r0, [pc, #32]	; (800019c <main+0x50>)
 800017c:	f001 fbe2 	bl	8001944 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &rxbuffer[0],1);
 8000180:	1d3b      	adds	r3, r7, #4
 8000182:	2201      	movs	r2, #1
 8000184:	4619      	mov	r1, r3
 8000186:	4806      	ldr	r0, [pc, #24]	; (80001a0 <main+0x54>)
 8000188:	f002 f933 	bl	80023f2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  HAL_UART_Receive_IT(&huart2, &rxbuffer[0],1);
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2201      	movs	r2, #1
 8000190:	4619      	mov	r1, r3
 8000192:	4803      	ldr	r0, [pc, #12]	; (80001a0 <main+0x54>)
 8000194:	f002 f92d 	bl	80023f2 <HAL_UART_Receive_IT>
 8000198:	e7f8      	b.n	800018c <main+0x40>
 800019a:	bf00      	nop
 800019c:	20000028 	.word	0x20000028
 80001a0:	20000070 	.word	0x20000070

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b090      	sub	sp, #64	; 0x40
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f002 fd5a 	bl	8002c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]
 80001c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c6:	2301      	movs	r3, #1
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d4:	2301      	movs	r3, #1
 80001d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d8:	2302      	movs	r3, #2
 80001da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e8:	f107 0318 	add.w	r3, r7, #24
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fe65 	bl	8000ebc <HAL_RCC_OscConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f8:	f000 f91c 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fc:	230f      	movs	r3, #15
 80001fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000200:	2302      	movs	r3, #2
 8000202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f001 f8d2 	bl	80013c0 <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000222:	f000 f907 	bl	8000434 <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3740      	adds	r7, #64	; 0x40
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b08a      	sub	sp, #40	; 0x28
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000236:	f107 0320 	add.w	r3, r7, #32
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]
 800024e:	615a      	str	r2, [r3, #20]
 8000250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000252:	4b22      	ldr	r3, [pc, #136]	; (80002dc <MX_TIM2_Init+0xac>)
 8000254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000258:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 800025a:	4b20      	ldr	r3, [pc, #128]	; (80002dc <MX_TIM2_Init+0xac>)
 800025c:	229f      	movs	r2, #159	; 0x9f
 800025e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000260:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <MX_TIM2_Init+0xac>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000266:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <MX_TIM2_Init+0xac>)
 8000268:	f240 32e7 	movw	r2, #999	; 0x3e7
 800026c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800026e:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <MX_TIM2_Init+0xac>)
 8000270:	2200      	movs	r2, #0
 8000272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <MX_TIM2_Init+0xac>)
 8000276:	2200      	movs	r2, #0
 8000278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800027a:	4818      	ldr	r0, [pc, #96]	; (80002dc <MX_TIM2_Init+0xac>)
 800027c:	f001 fb12 	bl	80018a4 <HAL_TIM_PWM_Init>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000286:	f000 f8d5 	bl	8000434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800028a:	2300      	movs	r3, #0
 800028c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800028e:	2300      	movs	r3, #0
 8000290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000292:	f107 0320 	add.w	r3, r7, #32
 8000296:	4619      	mov	r1, r3
 8000298:	4810      	ldr	r0, [pc, #64]	; (80002dc <MX_TIM2_Init+0xac>)
 800029a:	f001 ffed 	bl	8002278 <HAL_TIMEx_MasterConfigSynchronization>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80002a4:	f000 f8c6 	bl	8000434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002a8:	2360      	movs	r3, #96	; 0x60
 80002aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80002b4:	2304      	movs	r3, #4
 80002b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	4619      	mov	r1, r3
 80002be:	4807      	ldr	r0, [pc, #28]	; (80002dc <MX_TIM2_Init+0xac>)
 80002c0:	f001 fcea 	bl	8001c98 <HAL_TIM_PWM_ConfigChannel>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80002ca:	f000 f8b3 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <MX_TIM2_Init+0xac>)
 80002d0:	f000 f904 	bl	80004dc <HAL_TIM_MspPostInit>

}
 80002d4:	bf00      	nop
 80002d6:	3728      	adds	r7, #40	; 0x28
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000028 	.word	0x20000028

080002e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_USART2_UART_Init+0x4c>)
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_USART2_UART_Init+0x50>)
 80002e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <MX_USART2_UART_Init+0x4c>)
 80002ec:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80002f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_USART2_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_USART2_UART_Init+0x4c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_USART2_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_USART2_UART_Init+0x4c>)
 8000306:	220c      	movs	r2, #12
 8000308:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_USART2_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_USART2_UART_Init+0x4c>)
 8000318:	f002 f81e 	bl	8002358 <HAL_UART_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000322:	f000 f887 	bl	8000434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000070 	.word	0x20000070
 8000330:	40004400 	.word	0x40004400

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000348:	4b2d      	ldr	r3, [pc, #180]	; (8000400 <MX_GPIO_Init+0xcc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <MX_GPIO_Init+0xcc>)
 800034e:	f043 0310 	orr.w	r3, r3, #16
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b2a      	ldr	r3, [pc, #168]	; (8000400 <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0310 	and.w	r3, r3, #16
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000360:	4b27      	ldr	r3, [pc, #156]	; (8000400 <MX_GPIO_Init+0xcc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a26      	ldr	r2, [pc, #152]	; (8000400 <MX_GPIO_Init+0xcc>)
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <MX_GPIO_Init+0xcc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0320 	and.w	r3, r3, #32
 8000374:	60bb      	str	r3, [r7, #8]
 8000376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a20      	ldr	r2, [pc, #128]	; (8000400 <MX_GPIO_Init+0xcc>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <MX_GPIO_Init+0xcc>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0304 	and.w	r3, r3, #4
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_GPIO_Init+0xcc>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1a      	ldr	r2, [pc, #104]	; (8000400 <MX_GPIO_Init+0xcc>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_GPIO_Init+0xcc>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	603b      	str	r3, [r7, #0]
 80003a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2120      	movs	r1, #32
 80003ac:	4815      	ldr	r0, [pc, #84]	; (8000404 <MX_GPIO_Init+0xd0>)
 80003ae:	f000 fd4b 	bl	8000e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_GPIO_Init+0xd4>)
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	4619      	mov	r1, r3
 80003c6:	4811      	ldr	r0, [pc, #68]	; (800040c <MX_GPIO_Init+0xd8>)
 80003c8:	f000 fbba 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003cc:	2320      	movs	r3, #32
 80003ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2302      	movs	r3, #2
 80003da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	4619      	mov	r1, r3
 80003e2:	4808      	ldr	r0, [pc, #32]	; (8000404 <MX_GPIO_Init+0xd0>)
 80003e4:	f000 fbac 	bl	8000b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2100      	movs	r1, #0
 80003ec:	2028      	movs	r0, #40	; 0x28
 80003ee:	f000 facc 	bl	800098a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003f2:	2028      	movs	r0, #40	; 0x28
 80003f4:	f000 fae5 	bl	80009c2 <HAL_NVIC_EnableIRQ>

}
 80003f8:	bf00      	nop
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	40010800 	.word	0x40010800
 8000408:	10110000 	.word	0x10110000
 800040c:	40011000 	.word	0x40011000

08000410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d101      	bne.n	8000426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000422:	f000 f9e1 	bl	80007e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40000800 	.word	0x40000800

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_MspInit+0x5c>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x5c>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_MspInit+0x60>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_MspInit+0x60>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010000 	.word	0x40010000

080004a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004b4:	d10b      	bne.n	80004ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <HAL_TIM_PWM_MspInit+0x34>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <HAL_TIM_PWM_MspInit+0x34>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <HAL_TIM_PWM_MspInit+0x34>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004fa:	d117      	bne.n	800052c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <HAL_TIM_MspPostInit+0x58>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <HAL_TIM_MspPostInit+0x58>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_TIM_MspPostInit+0x58>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000514:	2301      	movs	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000518:	2302      	movs	r3, #2
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	2302      	movs	r3, #2
 800051e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <HAL_TIM_MspPostInit+0x5c>)
 8000528:	f000 fb0a 	bl	8000b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40021000 	.word	0x40021000
 8000538:	40010800 	.word	0x40010800

0800053c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <HAL_UART_MspInit+0x98>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d137      	bne.n	80005cc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <HAL_UART_MspInit+0x9c>)
 800055e:	69db      	ldr	r3, [r3, #28]
 8000560:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <HAL_UART_MspInit+0x9c>)
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	61d3      	str	r3, [r2, #28]
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <HAL_UART_MspInit+0x9c>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <HAL_UART_MspInit+0x9c>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <HAL_UART_MspInit+0x9c>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_UART_MspInit+0x9c>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800058c:	2304      	movs	r3, #4
 800058e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <HAL_UART_MspInit+0xa0>)
 80005a0:	f000 face 	bl	8000b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005a4:	2308      	movs	r3, #8
 80005a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <HAL_UART_MspInit+0xa0>)
 80005b8:	f000 fac2 	bl	8000b40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	2026      	movs	r0, #38	; 0x26
 80005c2:	f000 f9e2 	bl	800098a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005c6:	2026      	movs	r0, #38	; 0x26
 80005c8:	f000 f9fb 	bl	80009c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40004400 	.word	0x40004400
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010800 	.word	0x40010800

080005e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	; 0x38
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005e8:	2300      	movs	r3, #0
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005ec:	2300      	movs	r3, #0
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005f6:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <HAL_InitTick+0xe8>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a33      	ldr	r2, [pc, #204]	; (80006c8 <HAL_InitTick+0xe8>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <HAL_InitTick+0xe8>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800060e:	f107 0210 	add.w	r2, r7, #16
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f001 f84b 	bl	80016b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800061e:	6a3b      	ldr	r3, [r7, #32]
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000624:	2b00      	cmp	r3, #0
 8000626:	d103      	bne.n	8000630 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000628:	f001 f81c 	bl	8001664 <HAL_RCC_GetPCLK1Freq>
 800062c:	6378      	str	r0, [r7, #52]	; 0x34
 800062e:	e004      	b.n	800063a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000630:	f001 f818 	bl	8001664 <HAL_RCC_GetPCLK1Freq>
 8000634:	4603      	mov	r3, r0
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800063a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800063c:	4a23      	ldr	r2, [pc, #140]	; (80006cc <HAL_InitTick+0xec>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	0c9b      	lsrs	r3, r3, #18
 8000644:	3b01      	subs	r3, #1
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <HAL_InitTick+0xf0>)
 800064a:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <HAL_InitTick+0xf4>)
 800064c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <HAL_InitTick+0xf0>)
 8000650:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000654:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000656:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <HAL_InitTick+0xf0>)
 8000658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_InitTick+0xf0>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <HAL_InitTick+0xf0>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_InitTick+0xf0>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800066e:	4818      	ldr	r0, [pc, #96]	; (80006d0 <HAL_InitTick+0xf0>)
 8000670:	f001 f86e 	bl	8001750 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800067a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800067e:	2b00      	cmp	r3, #0
 8000680:	d11b      	bne.n	80006ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000682:	4813      	ldr	r0, [pc, #76]	; (80006d0 <HAL_InitTick+0xf0>)
 8000684:	f001 f8bc 	bl	8001800 <HAL_TIM_Base_Start_IT>
 8000688:	4603      	mov	r3, r0
 800068a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800068e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000692:	2b00      	cmp	r3, #0
 8000694:	d111      	bne.n	80006ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000696:	201e      	movs	r0, #30
 8000698:	f000 f993 	bl	80009c2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	d808      	bhi.n	80006b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006a2:	2200      	movs	r2, #0
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	201e      	movs	r0, #30
 80006a8:	f000 f96f 	bl	800098a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_InitTick+0xf8>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	e002      	b.n	80006ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3738      	adds	r7, #56	; 0x38
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	431bde83 	.word	0x431bde83
 80006d0:	200000b4 	.word	0x200000b4
 80006d4:	40000800 	.word	0x40000800
 80006d8:	20000004 	.word	0x20000004

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
	...

0800072c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <TIM4_IRQHandler+0x10>)
 8000732:	f001 f9a9 	bl	8001a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000b4 	.word	0x200000b4

08000740 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <USART2_IRQHandler+0x10>)
 8000746:	f001 fe85 	bl	8002454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000070 	.word	0x20000070

08000754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000758:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800075c:	f000 fb8c 	bl	8000e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	; (80007a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000796:	f7ff ffe5 	bl	8000764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f002 fa43 	bl	8002c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079e:	f7ff fcd5 	bl	800014c <main>
  bx lr
 80007a2:	4770      	bx	lr
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007ac:	08002cc4 	.word	0x08002cc4
  ldr r2, =_sbss
 80007b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007b4:	20000100 	.word	0x20000100

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>
	...

080007bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_Init+0x28>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <HAL_Init+0x28>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f8d1 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d2:	200f      	movs	r0, #15
 80007d4:	f7ff ff04 	bl	80005e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d8:	f7ff fe32 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40022000 	.word	0x40022000

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_IncTick+0x1c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x20>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a03      	ldr	r2, [pc, #12]	; (8000808 <HAL_IncTick+0x20>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	20000008 	.word	0x20000008
 8000808:	200000fc 	.word	0x200000fc

0800080c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <HAL_GetTick+0x10>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	200000fc 	.word	0x200000fc

08000820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db0b      	blt.n	80008ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <__NVIC_EnableIRQ+0x34>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	; 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff4f 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099c:	f7ff ff64 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff ffb2 	bl	8000910 <NVIC_EncodePriority>
 80009ac:	4602      	mov	r2, r0
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff81 	bl	80008bc <__NVIC_SetPriority>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff57 	bl	8000884 <__NVIC_EnableIRQ>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009de:	b480      	push	{r7}
 80009e0:	b085      	sub	sp, #20
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d008      	beq.n	8000a06 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2204      	movs	r2, #4
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e020      	b.n	8000a48 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 020e 	bic.w	r2, r2, #14
 8000a14:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f022 0201 	bic.w	r2, r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2e:	2101      	movs	r1, #1
 8000a30:	fa01 f202 	lsl.w	r2, r1, r2
 8000a34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
	...

08000a54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d005      	beq.n	8000a76 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
 8000a74:	e051      	b.n	8000b1a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f022 020e 	bic.w	r2, r2, #14
 8000a84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 0201 	bic.w	r2, r2, #1
 8000a94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <HAL_DMA_Abort_IT+0xd0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d029      	beq.n	8000af4 <HAL_DMA_Abort_IT+0xa0>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <HAL_DMA_Abort_IT+0xd4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d022      	beq.n	8000af0 <HAL_DMA_Abort_IT+0x9c>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <HAL_DMA_Abort_IT+0xd8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d01a      	beq.n	8000aea <HAL_DMA_Abort_IT+0x96>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_DMA_Abort_IT+0xdc>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d012      	beq.n	8000ae4 <HAL_DMA_Abort_IT+0x90>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <HAL_DMA_Abort_IT+0xe0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d00a      	beq.n	8000ade <HAL_DMA_Abort_IT+0x8a>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <HAL_DMA_Abort_IT+0xe4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d102      	bne.n	8000ad8 <HAL_DMA_Abort_IT+0x84>
 8000ad2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ad6:	e00e      	b.n	8000af6 <HAL_DMA_Abort_IT+0xa2>
 8000ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000adc:	e00b      	b.n	8000af6 <HAL_DMA_Abort_IT+0xa2>
 8000ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae2:	e008      	b.n	8000af6 <HAL_DMA_Abort_IT+0xa2>
 8000ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae8:	e005      	b.n	8000af6 <HAL_DMA_Abort_IT+0xa2>
 8000aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aee:	e002      	b.n	8000af6 <HAL_DMA_Abort_IT+0xa2>
 8000af0:	2310      	movs	r3, #16
 8000af2:	e000      	b.n	8000af6 <HAL_DMA_Abort_IT+0xa2>
 8000af4:	2301      	movs	r3, #1
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <HAL_DMA_Abort_IT+0xe8>)
 8000af8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2201      	movs	r2, #1
 8000afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	4798      	blx	r3
    } 
  }
  return status;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40020008 	.word	0x40020008
 8000b28:	4002001c 	.word	0x4002001c
 8000b2c:	40020030 	.word	0x40020030
 8000b30:	40020044 	.word	0x40020044
 8000b34:	40020058 	.word	0x40020058
 8000b38:	4002006c 	.word	0x4002006c
 8000b3c:	40020000 	.word	0x40020000

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b08b      	sub	sp, #44	; 0x2c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b52:	e169      	b.n	8000e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b54:	2201      	movs	r2, #1
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f040 8158 	bne.w	8000e22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	4a9a      	ldr	r2, [pc, #616]	; (8000de0 <HAL_GPIO_Init+0x2a0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d05e      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000b7c:	4a98      	ldr	r2, [pc, #608]	; (8000de0 <HAL_GPIO_Init+0x2a0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d875      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000b82:	4a98      	ldr	r2, [pc, #608]	; (8000de4 <HAL_GPIO_Init+0x2a4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d058      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000b88:	4a96      	ldr	r2, [pc, #600]	; (8000de4 <HAL_GPIO_Init+0x2a4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d86f      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000b8e:	4a96      	ldr	r2, [pc, #600]	; (8000de8 <HAL_GPIO_Init+0x2a8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d052      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000b94:	4a94      	ldr	r2, [pc, #592]	; (8000de8 <HAL_GPIO_Init+0x2a8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d869      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000b9a:	4a94      	ldr	r2, [pc, #592]	; (8000dec <HAL_GPIO_Init+0x2ac>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d04c      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000ba0:	4a92      	ldr	r2, [pc, #584]	; (8000dec <HAL_GPIO_Init+0x2ac>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d863      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000ba6:	4a92      	ldr	r2, [pc, #584]	; (8000df0 <HAL_GPIO_Init+0x2b0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d046      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000bac:	4a90      	ldr	r2, [pc, #576]	; (8000df0 <HAL_GPIO_Init+0x2b0>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d85d      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d82a      	bhi.n	8000c0c <HAL_GPIO_Init+0xcc>
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	d859      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <HAL_GPIO_Init+0x80>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c15 	.word	0x08000c15
 8000bc8:	08000c27 	.word	0x08000c27
 8000bcc:	08000c69 	.word	0x08000c69
 8000bd0:	08000c6f 	.word	0x08000c6f
 8000bd4:	08000c6f 	.word	0x08000c6f
 8000bd8:	08000c6f 	.word	0x08000c6f
 8000bdc:	08000c6f 	.word	0x08000c6f
 8000be0:	08000c6f 	.word	0x08000c6f
 8000be4:	08000c6f 	.word	0x08000c6f
 8000be8:	08000c6f 	.word	0x08000c6f
 8000bec:	08000c6f 	.word	0x08000c6f
 8000bf0:	08000c6f 	.word	0x08000c6f
 8000bf4:	08000c6f 	.word	0x08000c6f
 8000bf8:	08000c6f 	.word	0x08000c6f
 8000bfc:	08000c6f 	.word	0x08000c6f
 8000c00:	08000c6f 	.word	0x08000c6f
 8000c04:	08000c1d 	.word	0x08000c1d
 8000c08:	08000c31 	.word	0x08000c31
 8000c0c:	4a79      	ldr	r2, [pc, #484]	; (8000df4 <HAL_GPIO_Init+0x2b4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d013      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c12:	e02c      	b.n	8000c6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e029      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	3304      	adds	r3, #4
 8000c22:	623b      	str	r3, [r7, #32]
          break;
 8000c24:	e024      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e01f      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	330c      	adds	r3, #12
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e01a      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c42:	2304      	movs	r3, #4
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e013      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d105      	bne.n	8000c5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c50:	2308      	movs	r3, #8
 8000c52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	611a      	str	r2, [r3, #16]
          break;
 8000c5a:	e009      	b.n	8000c70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	615a      	str	r2, [r3, #20]
          break;
 8000c66:	e003      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e000      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          break;
 8000c6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	2bff      	cmp	r3, #255	; 0xff
 8000c74:	d801      	bhi.n	8000c7a <HAL_GPIO_Init+0x13a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	e001      	b.n	8000c7e <HAL_GPIO_Init+0x13e>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2bff      	cmp	r3, #255	; 0xff
 8000c84:	d802      	bhi.n	8000c8c <HAL_GPIO_Init+0x14c>
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	e002      	b.n	8000c92 <HAL_GPIO_Init+0x152>
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	3b08      	subs	r3, #8
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	210f      	movs	r1, #15
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	6a39      	ldr	r1, [r7, #32]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	431a      	orrs	r2, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80b1 	beq.w	8000e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc0:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <HAL_GPIO_Init+0x2b8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a4c      	ldr	r2, [pc, #304]	; (8000df8 <HAL_GPIO_Init+0x2b8>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <HAL_GPIO_Init+0x2b8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd8:	4a48      	ldr	r2, [pc, #288]	; (8000dfc <HAL_GPIO_Init+0x2bc>)
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a40      	ldr	r2, [pc, #256]	; (8000e00 <HAL_GPIO_Init+0x2c0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d013      	beq.n	8000d2c <HAL_GPIO_Init+0x1ec>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a3f      	ldr	r2, [pc, #252]	; (8000e04 <HAL_GPIO_Init+0x2c4>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d00d      	beq.n	8000d28 <HAL_GPIO_Init+0x1e8>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3e      	ldr	r2, [pc, #248]	; (8000e08 <HAL_GPIO_Init+0x2c8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d007      	beq.n	8000d24 <HAL_GPIO_Init+0x1e4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3d      	ldr	r2, [pc, #244]	; (8000e0c <HAL_GPIO_Init+0x2cc>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <HAL_GPIO_Init+0x1e0>
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e006      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d20:	2304      	movs	r3, #4
 8000d22:	e004      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d30:	f002 0203 	and.w	r2, r2, #3
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	4093      	lsls	r3, r2
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3e:	492f      	ldr	r1, [pc, #188]	; (8000dfc <HAL_GPIO_Init+0x2bc>)
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	492c      	ldr	r1, [pc, #176]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4928      	ldr	r1, [pc, #160]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4922      	ldr	r1, [pc, #136]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	491e      	ldr	r1, [pc, #120]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	4918      	ldr	r1, [pc, #96]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	608b      	str	r3, [r1, #8]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4914      	ldr	r1, [pc, #80]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d021      	beq.n	8000e14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	490e      	ldr	r1, [pc, #56]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60cb      	str	r3, [r1, #12]
 8000ddc:	e021      	b.n	8000e22 <HAL_GPIO_Init+0x2e2>
 8000dde:	bf00      	nop
 8000de0:	10320000 	.word	0x10320000
 8000de4:	10310000 	.word	0x10310000
 8000de8:	10220000 	.word	0x10220000
 8000dec:	10210000 	.word	0x10210000
 8000df0:	10120000 	.word	0x10120000
 8000df4:	10110000 	.word	0x10110000
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	40011400 	.word	0x40011400
 8000e10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_GPIO_Init+0x304>)
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	4909      	ldr	r1, [pc, #36]	; (8000e44 <HAL_GPIO_Init+0x304>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3301      	adds	r3, #1
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f47f ae8e 	bne.w	8000b54 <HAL_GPIO_Init+0x14>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	372c      	adds	r7, #44	; 0x2c
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	4613      	mov	r3, r2
 8000e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e58:	787b      	ldrb	r3, [r7, #1]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e64:	e003      	b.n	8000e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	041a      	lsls	r2, r3, #16
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	611a      	str	r2, [r3, #16]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f806 	bl	8000ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e272      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 8087 	beq.w	8000fea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000edc:	4b92      	ldr	r3, [pc, #584]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 030c 	and.w	r3, r3, #12
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d00c      	beq.n	8000f02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee8:	4b8f      	ldr	r3, [pc, #572]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d112      	bne.n	8000f1a <HAL_RCC_OscConfig+0x5e>
 8000ef4:	4b8c      	ldr	r3, [pc, #560]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f00:	d10b      	bne.n	8000f1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f02:	4b89      	ldr	r3, [pc, #548]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d06c      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x12c>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d168      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e24c      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f22:	d106      	bne.n	8000f32 <HAL_RCC_OscConfig+0x76>
 8000f24:	4b80      	ldr	r3, [pc, #512]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a7f      	ldr	r2, [pc, #508]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	e02e      	b.n	8000f90 <HAL_RCC_OscConfig+0xd4>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x98>
 8000f3a:	4b7b      	ldr	r3, [pc, #492]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a7a      	ldr	r2, [pc, #488]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b78      	ldr	r3, [pc, #480]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a77      	ldr	r2, [pc, #476]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e01d      	b.n	8000f90 <HAL_RCC_OscConfig+0xd4>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0xbc>
 8000f5e:	4b72      	ldr	r3, [pc, #456]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a71      	ldr	r2, [pc, #452]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b6f      	ldr	r3, [pc, #444]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6e      	ldr	r2, [pc, #440]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e00b      	b.n	8000f90 <HAL_RCC_OscConfig+0xd4>
 8000f78:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a6a      	ldr	r2, [pc, #424]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b68      	ldr	r3, [pc, #416]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a67      	ldr	r2, [pc, #412]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fc38 	bl	800080c <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fc34 	bl	800080c <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e200      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xe4>
 8000fbe:	e014      	b.n	8000fea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fc24 	bl	800080c <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fc20 	bl	800080c <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e1ec      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x10c>
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d063      	beq.n	80010be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b08      	cmp	r3, #8
 800100c:	d11c      	bne.n	8001048 <HAL_RCC_OscConfig+0x18c>
 800100e:	4b46      	ldr	r3, [pc, #280]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d116      	bne.n	8001048 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <HAL_RCC_OscConfig+0x176>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d001      	beq.n	8001032 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e1c0      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4939      	ldr	r1, [pc, #228]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	e03a      	b.n	80010be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d020      	beq.n	8001092 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001050:	4b36      	ldr	r3, [pc, #216]	; (800112c <HAL_RCC_OscConfig+0x270>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fbd9 	bl	800080c <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fbd5 	bl	800080c <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1a1      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4927      	ldr	r1, [pc, #156]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
 8001090:	e015      	b.n	80010be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_RCC_OscConfig+0x270>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fbb8 	bl	800080c <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fbb4 	bl	800080c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e180      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d03a      	beq.n	8001140 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d019      	beq.n	8001106 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_RCC_OscConfig+0x274>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fb98 	bl	800080c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fb94 	bl	800080c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e160      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 fb08 	bl	8001714 <RCC_Delay>
 8001104:	e01c      	b.n	8001140 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_RCC_OscConfig+0x274>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110c:	f7ff fb7e 	bl	800080c <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001112:	e00f      	b.n	8001134 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001114:	f7ff fb7a 	bl	800080c <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d908      	bls.n	8001134 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e146      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	42420000 	.word	0x42420000
 8001130:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001134:	4b92      	ldr	r3, [pc, #584]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1e9      	bne.n	8001114 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80a6 	beq.w	800129a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001152:	4b8b      	ldr	r3, [pc, #556]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10d      	bne.n	800117a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b88      	ldr	r3, [pc, #544]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a87      	ldr	r2, [pc, #540]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b85      	ldr	r3, [pc, #532]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <HAL_RCC_OscConfig+0x4c8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d118      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <HAL_RCC_OscConfig+0x4c8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a7e      	ldr	r2, [pc, #504]	; (8001384 <HAL_RCC_OscConfig+0x4c8>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fb3b 	bl	800080c <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fb37 	bl	800080c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b64      	cmp	r3, #100	; 0x64
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e103      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	4b75      	ldr	r3, [pc, #468]	; (8001384 <HAL_RCC_OscConfig+0x4c8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x312>
 80011c0:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a6e      	ldr	r2, [pc, #440]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6213      	str	r3, [r2, #32]
 80011cc:	e02d      	b.n	800122a <HAL_RCC_OscConfig+0x36e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x334>
 80011d6:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a69      	ldr	r2, [pc, #420]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	6213      	str	r3, [r2, #32]
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a66      	ldr	r2, [pc, #408]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0304 	bic.w	r3, r3, #4
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	e01c      	b.n	800122a <HAL_RCC_OscConfig+0x36e>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d10c      	bne.n	8001212 <HAL_RCC_OscConfig+0x356>
 80011f8:	4b61      	ldr	r3, [pc, #388]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a60      	ldr	r2, [pc, #384]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a5d      	ldr	r2, [pc, #372]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	e00b      	b.n	800122a <HAL_RCC_OscConfig+0x36e>
 8001212:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a5a      	ldr	r2, [pc, #360]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	4b58      	ldr	r3, [pc, #352]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a57      	ldr	r2, [pc, #348]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d015      	beq.n	800125e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff faeb 	bl	800080c <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fae7 	bl	800080c <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f241 3288 	movw	r2, #5000	; 0x1388
 8001248:	4293      	cmp	r3, r2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e0b1      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0ee      	beq.n	800123a <HAL_RCC_OscConfig+0x37e>
 800125c:	e014      	b.n	8001288 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fad5 	bl	800080c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001264:	e00a      	b.n	800127c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001266:	f7ff fad1 	bl	800080c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f241 3288 	movw	r2, #5000	; 0x1388
 8001274:	4293      	cmp	r3, r2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e09b      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127c:	4b40      	ldr	r3, [pc, #256]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1ee      	bne.n	8001266 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d105      	bne.n	800129a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a3b      	ldr	r2, [pc, #236]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001298:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8087 	beq.w	80013b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d061      	beq.n	8001374 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d146      	bne.n	8001346 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <HAL_RCC_OscConfig+0x4cc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff faa5 	bl	800080c <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c6:	f7ff faa1 	bl	800080c <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e06d      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d108      	bne.n	8001300 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4921      	ldr	r1, [pc, #132]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a19      	ldr	r1, [r3, #32]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	430b      	orrs	r3, r1
 8001312:	491b      	ldr	r1, [pc, #108]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_RCC_OscConfig+0x4cc>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fa75 	bl	800080c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff fa71 	bl	800080c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e03d      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x46a>
 8001344:	e035      	b.n	80013b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_RCC_OscConfig+0x4cc>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fa5e 	bl	800080c <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fa5a 	bl	800080c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e026      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x498>
 8001372:	e01e      	b.n	80013b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d107      	bne.n	800138c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e019      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
 8001380:	40021000 	.word	0x40021000
 8001384:	40007000 	.word	0x40007000
 8001388:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_OscConfig+0x500>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	429a      	cmp	r2, r3
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000

080013c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0d0      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013d4:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d910      	bls.n	8001404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e2:	4b67      	ldr	r3, [pc, #412]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 0207 	bic.w	r2, r3, #7
 80013ea:	4965      	ldr	r1, [pc, #404]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0b8      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800141c:	4b59      	ldr	r3, [pc, #356]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001426:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800143e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	494d      	ldr	r1, [pc, #308]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d040      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d115      	bne.n	800149e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e07f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d107      	bne.n	800148e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147e:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e073      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06b      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f023 0203 	bic.w	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4936      	ldr	r1, [pc, #216]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b0:	f7ff f9ac 	bl	800080c <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b8:	f7ff f9a8 	bl	800080c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e053      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 020c 	and.w	r2, r3, #12
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	429a      	cmp	r2, r3
 80014de:	d1eb      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d210      	bcs.n	8001510 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 0207 	bic.w	r2, r3, #7
 80014f6:	4922      	ldr	r1, [pc, #136]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e032      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4916      	ldr	r1, [pc, #88]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	490e      	ldr	r1, [pc, #56]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800154e:	f000 f821 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8001552:	4602      	mov	r2, r0
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	490a      	ldr	r1, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x1c8>)
 8001560:	5ccb      	ldrb	r3, [r1, r3]
 8001562:	fa22 f303 	lsr.w	r3, r2, r3
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1cc>)
 8001568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1d0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f836 	bl	80005e0 <HAL_InitTick>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000
 8001584:	40021000 	.word	0x40021000
 8001588:	08002ca4 	.word	0x08002ca4
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b490      	push	{r4, r7}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_RCC_GetSysClockFreq+0xac>)
 800159c:	1d3c      	adds	r4, r7, #4
 800159e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015a4:	f240 2301 	movw	r3, #513	; 0x201
 80015a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x40>
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x46>
 80015d2:	e02b      	b.n	800162c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015d6:	623b      	str	r3, [r7, #32]
      break;
 80015d8:	e02b      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3328      	adds	r3, #40	; 0x28
 80015e4:	443b      	add	r3, r7
 80015e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d012      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	0c5b      	lsrs	r3, r3, #17
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	3328      	adds	r3, #40	; 0x28
 8001602:	443b      	add	r3, r7
 8001604:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001608:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb4>)
 800160e:	fb03 f202 	mul.w	r2, r3, r2
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	fbb2 f3f3 	udiv	r3, r2, r3
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	e004      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	623b      	str	r3, [r7, #32]
      break;
 800162a:	e002      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb4>)
 800162e:	623b      	str	r3, [r7, #32]
      break;
 8001630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001632:	6a3b      	ldr	r3, [r7, #32]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bc90      	pop	{r4, r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	08002c94 	.word	0x08002c94
 8001644:	40021000 	.word	0x40021000
 8001648:	007a1200 	.word	0x007a1200
 800164c:	003d0900 	.word	0x003d0900

08001650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001654:	4b02      	ldr	r3, [pc, #8]	; (8001660 <HAL_RCC_GetHCLKFreq+0x10>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000000 	.word	0x20000000

08001664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001668:	f7ff fff2 	bl	8001650 <HAL_RCC_GetHCLKFreq>
 800166c:	4602      	mov	r2, r0
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	4903      	ldr	r1, [pc, #12]	; (8001688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800167a:	5ccb      	ldrb	r3, [r1, r3]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	08002cb4 	.word	0x08002cb4

0800168c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001690:	f7ff ffde 	bl	8001650 <HAL_RCC_GetHCLKFreq>
 8001694:	4602      	mov	r2, r0
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	0adb      	lsrs	r3, r3, #11
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	4903      	ldr	r1, [pc, #12]	; (80016b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016a2:	5ccb      	ldrb	r3, [r1, r3]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	08002cb4 	.word	0x08002cb4

080016b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	220f      	movs	r2, #15
 80016c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_RCC_GetClockConfig+0x58>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_RCC_GetClockConfig+0x58>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_GetClockConfig+0x58>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_RCC_GetClockConfig+0x58>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	08db      	lsrs	r3, r3, #3
 80016ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_RCC_GetClockConfig+0x5c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0207 	and.w	r2, r3, #7
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000
 8001710:	40022000 	.word	0x40022000

08001714 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <RCC_Delay+0x34>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <RCC_Delay+0x38>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0a5b      	lsrs	r3, r3, #9
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001730:	bf00      	nop
  }
  while (Delay --);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1e5a      	subs	r2, r3, #1
 8001736:	60fa      	str	r2, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f9      	bne.n	8001730 <RCC_Delay+0x1c>
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000000 	.word	0x20000000
 800174c:	10624dd3 	.word	0x10624dd3

08001750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e041      	b.n	80017e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d106      	bne.n	800177c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f839 	bl	80017ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3304      	adds	r3, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f000 fb64 	bl	8001e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d001      	beq.n	8001818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e03a      	b.n	800188e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_TIM_Base_Start_IT+0x98>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00e      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x58>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001842:	d009      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x58>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <HAL_TIM_Base_Start_IT+0x9c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d004      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x58>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d111      	bne.n	800187c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b06      	cmp	r3, #6
 8001868:	d010      	beq.n	800188c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800187a:	e007      	b.n	800188c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40012c00 	.word	0x40012c00
 800189c:	40000400 	.word	0x40000400
 80018a0:	40000800 	.word	0x40000800

080018a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e041      	b.n	800193a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7fe fdea 	bl	80004a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3304      	adds	r3, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4610      	mov	r0, r2
 80018e4:	f000 faba 	bl	8001e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d109      	bne.n	8001968 <HAL_TIM_PWM_Start+0x24>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b01      	cmp	r3, #1
 800195e:	bf14      	ite	ne
 8001960:	2301      	movne	r3, #1
 8001962:	2300      	moveq	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	e022      	b.n	80019ae <HAL_TIM_PWM_Start+0x6a>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b04      	cmp	r3, #4
 800196c:	d109      	bne.n	8001982 <HAL_TIM_PWM_Start+0x3e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	e015      	b.n	80019ae <HAL_TIM_PWM_Start+0x6a>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b08      	cmp	r3, #8
 8001986:	d109      	bne.n	800199c <HAL_TIM_PWM_Start+0x58>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	e008      	b.n	80019ae <HAL_TIM_PWM_Start+0x6a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e05e      	b.n	8001a74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d104      	bne.n	80019c6 <HAL_TIM_PWM_Start+0x82>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019c4:	e013      	b.n	80019ee <HAL_TIM_PWM_Start+0xaa>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d104      	bne.n	80019d6 <HAL_TIM_PWM_Start+0x92>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019d4:	e00b      	b.n	80019ee <HAL_TIM_PWM_Start+0xaa>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d104      	bne.n	80019e6 <HAL_TIM_PWM_Start+0xa2>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019e4:	e003      	b.n	80019ee <HAL_TIM_PWM_Start+0xaa>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2202      	movs	r2, #2
 80019ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2201      	movs	r2, #1
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fc1a 	bl	8002230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <HAL_TIM_PWM_Start+0x138>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d107      	bne.n	8001a16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <HAL_TIM_PWM_Start+0x138>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00e      	beq.n	8001a3e <HAL_TIM_PWM_Start+0xfa>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d009      	beq.n	8001a3e <HAL_TIM_PWM_Start+0xfa>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_TIM_PWM_Start+0x13c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d004      	beq.n	8001a3e <HAL_TIM_PWM_Start+0xfa>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_TIM_PWM_Start+0x140>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d111      	bne.n	8001a62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	d010      	beq.n	8001a72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a60:	e007      	b.n	8001a72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40012c00 	.word	0x40012c00
 8001a80:	40000400 	.word	0x40000400
 8001a84:	40000800 	.word	0x40000800

08001a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d122      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0202 	mvn.w	r2, #2
 8001ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f9ab 	bl	8001e26 <HAL_TIM_IC_CaptureCallback>
 8001ad0:	e005      	b.n	8001ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f99e 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f9ad 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d122      	bne.n	8001b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d11b      	bne.n	8001b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0204 	mvn.w	r2, #4
 8001b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f981 	bl	8001e26 <HAL_TIM_IC_CaptureCallback>
 8001b24:	e005      	b.n	8001b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f974 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f983 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d122      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d11b      	bne.n	8001b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0208 	mvn.w	r2, #8
 8001b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2204      	movs	r2, #4
 8001b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f957 	bl	8001e26 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f94a 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f959 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d122      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d11b      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0210 	mvn.w	r2, #16
 8001bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f92d 	bl	8001e26 <HAL_TIM_IC_CaptureCallback>
 8001bcc:	e005      	b.n	8001bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f920 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f92f 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10e      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d107      	bne.n	8001c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0201 	mvn.w	r2, #1
 8001c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7fe fc02 	bl	8000410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	2b80      	cmp	r3, #128	; 0x80
 8001c18:	d10e      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c24:	2b80      	cmp	r3, #128	; 0x80
 8001c26:	d107      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fb87 	bl	8002346 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c42:	2b40      	cmp	r3, #64	; 0x40
 8001c44:	d10e      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	d107      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8f3 	bl	8001e4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d107      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0220 	mvn.w	r2, #32
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fb52 	bl	8002334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e0ac      	b.n	8001e0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	f200 809f 	bhi.w	8001e00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001cc2:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001cfd 	.word	0x08001cfd
 8001ccc:	08001e01 	.word	0x08001e01
 8001cd0:	08001e01 	.word	0x08001e01
 8001cd4:	08001e01 	.word	0x08001e01
 8001cd8:	08001d3d 	.word	0x08001d3d
 8001cdc:	08001e01 	.word	0x08001e01
 8001ce0:	08001e01 	.word	0x08001e01
 8001ce4:	08001e01 	.word	0x08001e01
 8001ce8:	08001d7f 	.word	0x08001d7f
 8001cec:	08001e01 	.word	0x08001e01
 8001cf0:	08001e01 	.word	0x08001e01
 8001cf4:	08001e01 	.word	0x08001e01
 8001cf8:	08001dbf 	.word	0x08001dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f90c 	bl	8001f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0208 	orr.w	r2, r2, #8
 8001d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6999      	ldr	r1, [r3, #24]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	619a      	str	r2, [r3, #24]
      break;
 8001d3a:	e062      	b.n	8001e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f952 	bl	8001fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6999      	ldr	r1, [r3, #24]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	021a      	lsls	r2, r3, #8
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	619a      	str	r2, [r3, #24]
      break;
 8001d7c:	e041      	b.n	8001e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68b9      	ldr	r1, [r7, #8]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f99b 	bl	80020c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0208 	orr.w	r2, r2, #8
 8001d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0204 	bic.w	r2, r2, #4
 8001da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69d9      	ldr	r1, [r3, #28]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	61da      	str	r2, [r3, #28]
      break;
 8001dbc:	e021      	b.n	8001e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f9e5 	bl	8002194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69d9      	ldr	r1, [r3, #28]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	021a      	lsls	r2, r3, #8
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	61da      	str	r2, [r3, #28]
      break;
 8001dfe:	e000      	b.n	8001e02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001e00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <TIM_Base_SetConfig+0xb8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00b      	beq.n	8001e8c <TIM_Base_SetConfig+0x30>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7a:	d007      	beq.n	8001e8c <TIM_Base_SetConfig+0x30>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <TIM_Base_SetConfig+0xbc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d003      	beq.n	8001e8c <TIM_Base_SetConfig+0x30>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a25      	ldr	r2, [pc, #148]	; (8001f1c <TIM_Base_SetConfig+0xc0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d108      	bne.n	8001e9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <TIM_Base_SetConfig+0xb8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00b      	beq.n	8001ebe <TIM_Base_SetConfig+0x62>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d007      	beq.n	8001ebe <TIM_Base_SetConfig+0x62>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <TIM_Base_SetConfig+0xbc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <TIM_Base_SetConfig+0x62>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <TIM_Base_SetConfig+0xc0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <TIM_Base_SetConfig+0xb8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d103      	bne.n	8001f04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	615a      	str	r2, [r3, #20]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40000800 	.word	0x40000800

08001f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	f023 0201 	bic.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0303 	bic.w	r3, r3, #3
 8001f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f023 0302 	bic.w	r3, r3, #2
 8001f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <TIM_OC1_SetConfig+0xc8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10c      	bne.n	8001f96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f023 0308 	bic.w	r3, r3, #8
 8001f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <TIM_OC1_SetConfig+0xc8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d111      	bne.n	8001fc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	621a      	str	r2, [r3, #32]
}
 8001fdc:	bf00      	nop
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40012c00 	.word	0x40012c00

08001fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f023 0210 	bic.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800201a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f023 0320 	bic.w	r3, r3, #32
 8002036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <TIM_OC2_SetConfig+0xd0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d10d      	bne.n	8002068 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <TIM_OC2_SetConfig+0xd0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d113      	bne.n	8002098 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800207e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	621a      	str	r2, [r3, #32]
}
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	40012c00 	.word	0x40012c00

080020c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0303 	bic.w	r3, r3, #3
 80020f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <TIM_OC3_SetConfig+0xd0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10d      	bne.n	800213a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <TIM_OC3_SetConfig+0xd0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d113      	bne.n	800216a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	621a      	str	r2, [r3, #32]
}
 8002184:	bf00      	nop
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40012c00 	.word	0x40012c00

08002194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	031b      	lsls	r3, r3, #12
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <TIM_OC4_SetConfig+0x98>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d109      	bne.n	8002208 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	621a      	str	r2, [r3, #32]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40012c00 	.word	0x40012c00

08002230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2201      	movs	r2, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a1a      	ldr	r2, [r3, #32]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	43db      	mvns	r3, r3
 8002252:	401a      	ands	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	621a      	str	r2, [r3, #32]
}
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800228c:	2302      	movs	r3, #2
 800228e:	e046      	b.n	800231e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a16      	ldr	r2, [pc, #88]	; (8002328 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00e      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022dc:	d009      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d004      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10c      	bne.n	800230c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4313      	orrs	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	40012c00 	.word	0x40012c00
 800232c:	40000400 	.word	0x40000400
 8002330:	40000800 	.word	0x40000800

08002334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e03f      	b.n	80023ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe f8dc 	bl	800053c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800239a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fbb3 	bl	8002b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	4613      	mov	r3, r2
 80023fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b20      	cmp	r3, #32
 800240a:	d11d      	bne.n	8002448 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_UART_Receive_IT+0x26>
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e016      	b.n	800244a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_UART_Receive_IT+0x38>
 8002426:	2302      	movs	r3, #2
 8002428:	e00f      	b.n	800244a <HAL_UART_Receive_IT+0x58>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	461a      	mov	r2, r3
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f9d8 	bl	80027f4 <UART_Start_Receive_IT>
 8002444:	4603      	mov	r3, r0
 8002446:	e000      	b.n	800244a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10d      	bne.n	80024a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_UART_IRQHandler+0x52>
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa88 	bl	80029b4 <UART_Receive_IT>
      return;
 80024a4:	e17b      	b.n	800279e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80b1 	beq.w	8002610 <HAL_UART_IRQHandler+0x1bc>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_UART_IRQHandler+0x70>
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80a6 	beq.w	8002610 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_UART_IRQHandler+0x90>
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_UART_IRQHandler+0xb0>
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f043 0202 	orr.w	r2, r3, #2
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_UART_IRQHandler+0xd0>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f043 0204 	orr.w	r2, r3, #4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00f      	beq.n	800254e <HAL_UART_IRQHandler+0xfa>
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d104      	bne.n	8002542 <HAL_UART_IRQHandler+0xee>
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f043 0208 	orr.w	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 811e 	beq.w	8002794 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <HAL_UART_IRQHandler+0x11e>
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fa21 	bl	80029b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <HAL_UART_IRQHandler+0x146>
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d031      	beq.n	80025fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f963 	bl	8002866 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d023      	beq.n	80025f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d013      	beq.n	80025ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	4a76      	ldr	r2, [pc, #472]	; (80027a4 <HAL_UART_IRQHandler+0x350>)
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fa3e 	bl	8000a54 <HAL_DMA_Abort_IT>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025e8:	4610      	mov	r0, r2
 80025ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ec:	e00e      	b.n	800260c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f8ec 	bl	80027cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	e00a      	b.n	800260c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8e8 	bl	80027cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	e006      	b.n	800260c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f8e4 	bl	80027cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800260a:	e0c3      	b.n	8002794 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	bf00      	nop
    return;
 800260e:	e0c1      	b.n	8002794 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	2b01      	cmp	r3, #1
 8002616:	f040 80a1 	bne.w	800275c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 809b 	beq.w	800275c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8095 	beq.w	800275c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d04e      	beq.n	80026f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002660:	8a3b      	ldrh	r3, [r7, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8098 	beq.w	8002798 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800266c:	8a3a      	ldrh	r2, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	f080 8092 	bcs.w	8002798 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8a3a      	ldrh	r2, [r7, #16]
 8002678:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b20      	cmp	r3, #32
 8002682:	d02b      	beq.n	80026dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002692:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0210 	bic.w	r2, r2, #16
 80026d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f981 	bl	80009de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	4619      	mov	r1, r3
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f876 	bl	80027de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026f2:	e051      	b.n	8002798 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d047      	beq.n	800279c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800270c:	8a7b      	ldrh	r3, [r7, #18]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d044      	beq.n	800279c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002720:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0210 	bic.w	r2, r2, #16
 800274e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002750:	8a7b      	ldrh	r3, [r7, #18]
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f842 	bl	80027de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800275a:	e01f      	b.n	800279c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_UART_IRQHandler+0x324>
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8b8 	bl	80028e6 <UART_Transmit_IT>
    return;
 8002776:	e012      	b.n	800279e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00d      	beq.n	800279e <HAL_UART_IRQHandler+0x34a>
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f8f9 	bl	8002984 <UART_EndTransmit_IT>
    return;
 8002792:	e004      	b.n	800279e <HAL_UART_IRQHandler+0x34a>
    return;
 8002794:	bf00      	nop
 8002796:	e002      	b.n	800279e <HAL_UART_IRQHandler+0x34a>
      return;
 8002798:	bf00      	nop
 800279a:	e000      	b.n	800279e <HAL_UART_IRQHandler+0x34a>
      return;
 800279c:	bf00      	nop
  }
}
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	080028bf 	.word	0x080028bf

080027a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2222      	movs	r2, #34	; 0x22
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002838:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0201 	orr.w	r2, r2, #1
 8002848:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0220 	orr.w	r2, r2, #32
 8002858:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800287c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	2b01      	cmp	r3, #1
 8002894:	d107      	bne.n	80028a6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0210 	bic.w	r2, r2, #16
 80028a4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f7ff ff77 	bl	80027cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b21      	cmp	r3, #33	; 0x21
 80028f8:	d13e      	bne.n	8002978 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002902:	d114      	bne.n	800292e <UART_Transmit_IT+0x48>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d110      	bne.n	800292e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002920:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	1c9a      	adds	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	621a      	str	r2, [r3, #32]
 800292c:	e008      	b.n	8002940 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	1c59      	adds	r1, r3, #1
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6211      	str	r1, [r2, #32]
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29b      	uxth	r3, r3
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4619      	mov	r1, r3
 800294e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10f      	bne.n	8002974 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002962:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002972:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff feff 	bl	80027a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b22      	cmp	r3, #34	; 0x22
 80029c6:	f040 8099 	bne.w	8002afc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	d117      	bne.n	8002a04 <UART_Receive_IT+0x50>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d113      	bne.n	8002a04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	1c9a      	adds	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	629a      	str	r2, [r3, #40]	; 0x28
 8002a02:	e026      	b.n	8002a52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a16:	d007      	beq.n	8002a28 <UART_Receive_IT+0x74>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <UART_Receive_IT+0x82>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e008      	b.n	8002a48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d148      	bne.n	8002af8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0220 	bic.w	r2, r2, #32
 8002a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d123      	bne.n	8002aee <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0210 	bic.w	r2, r2, #16
 8002aba:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d10a      	bne.n	8002ae0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fe79 	bl	80027de <HAL_UARTEx_RxEventCallback>
 8002aec:	e002      	b.n	8002af4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fe63 	bl	80027ba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e002      	b.n	8002afe <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b42:	f023 030c 	bic.w	r3, r3, #12
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2c      	ldr	r2, [pc, #176]	; (8002c1c <UART_SetConfig+0x114>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d103      	bne.n	8002b78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7fe fd8c 	bl	800168c <HAL_RCC_GetPCLK2Freq>
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	e002      	b.n	8002b7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b78:	f7fe fd74 	bl	8001664 <HAL_RCC_GetPCLK1Freq>
 8002b7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	009a      	lsls	r2, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <UART_SetConfig+0x118>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	0119      	lsls	r1, r3, #4
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009a      	lsls	r2, r3, #2
 8002ba8:	441a      	add	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <UART_SetConfig+0x118>)
 8002bb6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2064      	movs	r0, #100	; 0x64
 8002bbe:	fb00 f303 	mul.w	r3, r0, r3
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	3332      	adds	r3, #50	; 0x32
 8002bc8:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <UART_SetConfig+0x118>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd4:	4419      	add	r1, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	009a      	lsls	r2, r3, #2
 8002be0:	441a      	add	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <UART_SetConfig+0x118>)
 8002bee:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2064      	movs	r0, #100	; 0x64
 8002bf6:	fb00 f303 	mul.w	r3, r0, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	3332      	adds	r3, #50	; 0x32
 8002c00:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <UART_SetConfig+0x118>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	440a      	add	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	51eb851f 	.word	0x51eb851f

08002c24 <__libc_init_array>:
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	2600      	movs	r6, #0
 8002c28:	4d0c      	ldr	r5, [pc, #48]	; (8002c5c <__libc_init_array+0x38>)
 8002c2a:	4c0d      	ldr	r4, [pc, #52]	; (8002c60 <__libc_init_array+0x3c>)
 8002c2c:	1b64      	subs	r4, r4, r5
 8002c2e:	10a4      	asrs	r4, r4, #2
 8002c30:	42a6      	cmp	r6, r4
 8002c32:	d109      	bne.n	8002c48 <__libc_init_array+0x24>
 8002c34:	f000 f822 	bl	8002c7c <_init>
 8002c38:	2600      	movs	r6, #0
 8002c3a:	4d0a      	ldr	r5, [pc, #40]	; (8002c64 <__libc_init_array+0x40>)
 8002c3c:	4c0a      	ldr	r4, [pc, #40]	; (8002c68 <__libc_init_array+0x44>)
 8002c3e:	1b64      	subs	r4, r4, r5
 8002c40:	10a4      	asrs	r4, r4, #2
 8002c42:	42a6      	cmp	r6, r4
 8002c44:	d105      	bne.n	8002c52 <__libc_init_array+0x2e>
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4c:	4798      	blx	r3
 8002c4e:	3601      	adds	r6, #1
 8002c50:	e7ee      	b.n	8002c30 <__libc_init_array+0xc>
 8002c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c56:	4798      	blx	r3
 8002c58:	3601      	adds	r6, #1
 8002c5a:	e7f2      	b.n	8002c42 <__libc_init_array+0x1e>
 8002c5c:	08002cbc 	.word	0x08002cbc
 8002c60:	08002cbc 	.word	0x08002cbc
 8002c64:	08002cbc 	.word	0x08002cbc
 8002c68:	08002cc0 	.word	0x08002cc0

08002c6c <memset>:
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4402      	add	r2, r0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d100      	bne.n	8002c76 <memset+0xa>
 8002c74:	4770      	bx	lr
 8002c76:	f803 1b01 	strb.w	r1, [r3], #1
 8002c7a:	e7f9      	b.n	8002c70 <memset+0x4>

08002c7c <_init>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	bf00      	nop
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr

08002c88 <_fini>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr
